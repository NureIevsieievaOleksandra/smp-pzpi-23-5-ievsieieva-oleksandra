МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 1 з дисципліни
Скриптові мови програмування
   





Виконала:                                                                                     Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Євсєєва Олександра						Сокорчук Ігор Петрович









Харків 2025 
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	05.06	1.0	Створено звіт

 
2 ЗАВДАННЯ

Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу.
Наприклад таку:
     *  
    ###  
   *****  
  #######  
 *********  
    ###  
   *****  
  #######  
 *********  
    ###  
    ###  
***********  
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких
сусідні рядки відрізняються на два символи та складаються почергово
або з символів «*» або з символів «#»
наприклад як такий:
    *  
   ###  
  *****  
 #######   
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо,
скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента
і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi  
while ... do ... done  
until ... do ... done  
for ... in .. do ... done  
for ((...)); do ... done  
У скрипті також потрібно використати функцію.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ

Для створення зображення ялинки за допомогою Bash-скрипту необхідно враховувати параметри довжини та висоти самого дерева, а також ширину снігу під нею.
Почнемо із обов'язкової перевірки аргументів на початку:
3  if (( $# != 2 || $1 < 8 || $2 < ($1 / 2 * 2) - 1 || $2 > ($1 / 2 * 2) )); then
4      echo "You can't build a tree with such parameters. Please check if tree hight is not less than 8 and the width is an odd number" >&2
5      exit 1

	Тут перевіряється: чи було передано 2 аргументи. Перевіряє чи перший параметр більший або дорівнює 8, це буде висота ялинки. Далі – чи ширина є більшою ніж висота для збереження симетрії.
	Якщо хоча б одна із умов не виконується, то виводиться текст помилки. В іншому разі переходимо до алгориту побудови ялинки: generate_branches (див. додаток В).
	Ця функція визначає кількість рядків у шарі та для кожного рядка малює символи * та # у чергуванні, збільшуючи ширину знизу вгору. Також вона вирівнює гілки по центру за допомогою пробілів.
Далі переходимо до функції generate_branches.
47  generate_branches $(((TREE_H - 1) / 2)) $((TREE_W - 2))
	
	Ця функція малює верхній шар ялинки.
	Далі генерація стовбура:
49  base_pad=$(( (TREE_W - 3) / 2 ))
50  
51  for stem in 1 2; do
52      printf "%${base_pad}s###\n"
53  done

Стовбур — дві стрічки з символів ###, вирівняні по центру. І остання частина коду це нижній шар снігу:
55  star_idx=0
56  while [[ $star_idx -lt $TREE_W ]]; do
57      printf "*"
58      ((star_idx++))
59  done
60  printf "\n"

Остання частина за допомогою циклу while генерує рядок із * із заданою шириною TREE_W.
 
4 ВИСНОВКИ

Під час виконання практичної роботи було створено Bash-скрипт для малювання ялинки із певними вимогами та обмеженнями вхідних параметрів. Також було необхідно, щоб скрипт перевіряв аргументи та обробляв помилку.
 
ДОДАТОК А
Відеозапис
Посилання на відео: https://youtu.be/opgPBt-iHqY. 
Хронологічний опис відеозапису:
00:00 - Вступ, вітання 
00:20 - Демонстрація роботи коду
01:05 - Пояснення коду
 
ДОДАТОК Б
Графічні матеріали
 
Рисунок Б.1 – Демонстрація роботи коду при некоректних параметрах

  Рисунок Б.2 – Демонстрація роботи коду при коректних параметрах
 
ДОДАТОК В
Програмний код

B.1 {smp-pzpi-23-5-ievsieieva-oleksandra-pract1-code.sh}
GitHub репозиторій: https://github.com/NureIevsieievaOleksandra/smp-pzpi-23-5-ievsieieva-oleksandra/blob/main/Pract1/smp-pzpi-23-5-ievsieieva-oleksandra-pract1-code.sh 
1  #!/bin/bash
 2  
 3  if (( $# != 2 || $1 < 8 || $2 < ($1 / 2 * 2) - 1 || $2 > ($1 / 2 * 2) )); then
 4      echo "You can't build a tree with such parameters. Please check if tree hight is not less than 8 and the width is an odd number" >&2
 5      exit 1
 6  fi
 7  
 8  TREE_H=$(( $1 / 2 * 2 ))
 9  TREE_W=$(( TREE_H - 1 ))
10  
11  generate_branches() {
12      local level_count=$(( (TREE_H - 2) / 2 ))
13      local max_line_width=$(( TREE_W - 2 ))
14      local mark="*"
15  
16      for ((line_idx = 1; line_idx <= level_count; line_idx++)); do
17          local chars=$(( 1 + (line_idx - 1) * 2 ))
18          local left_pad=$(( ((max_line_width - chars) / 2) + 1 ))
19  
20          printf "%${left_pad}s" ""
21          printf "%${chars}s\n" | tr ' ' "$mark"
22  
23          if [[ "$mark" == "*" ]]; then
24              mark="#"
25          else
26              mark="*"
27          fi
28      done
29  
30      line_idx=2
31      until [[ $line_idx -gt level_count ]]; do
32          local chars=$(( 1 + (line_idx - 1) * 2 ))
33          local left_pad=$(( ((max_line_width - chars) / 2) + 1 ))
34  
35          printf "%${left_pad}s" ""
36          printf "%${chars}s\n" | tr ' ' "$mark"
37  
38          if [[ "$mark" == "*" ]]; then
39              mark="#"
40          else
41              mark="*"
42          fi
43          ((line_idx++))
44      done
45  }
46  
47  generate_branches $(((TREE_H - 1) / 2)) $((TREE_W - 2))
48  
49  base_pad=$(( (TREE_W - 3) / 2 ))
50  
51  for stem in 1 2; do
52      printf "%${base_pad}s###\n"
53  done
54  
55  star_idx=0
56  while [[ $star_idx -lt $TREE_W ]]; do
57      printf "*"
58      ((star_idx++))
59  done
60  printf "\n"
